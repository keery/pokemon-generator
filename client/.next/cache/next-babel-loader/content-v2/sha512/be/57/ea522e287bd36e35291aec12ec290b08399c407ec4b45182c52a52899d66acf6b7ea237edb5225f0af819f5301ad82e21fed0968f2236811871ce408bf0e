{"ast":null,"code":"var _jsxFileName = \"/Users/guillaumeesnault/Documents/Projects/pokemon-generator/client/components/Card/TypeWithAmount.tsx\",\n    _this = this,\n    _s = $RefreshSig$();\n\nvar __jsx = React.createElement;\nimport React from \"react\";\nimport { useWatch } from \"react-hook-form\";\nimport { Text, Group, Image as ImageCanvas } from \"react-konva\";\n\nvar TypeWithAmount = function TypeWithAmount(_ref) {\n  _s();\n\n  var control = _ref.control,\n      name = _ref.name,\n      _ref$x = _ref.x,\n      x = _ref$x === void 0 ? 0 : _ref$x,\n      _ref$y = _ref.y,\n      y = _ref$y === void 0 ? 0 : _ref$y;\n  var values = useWatch({\n    control: control,\n    name: [\"\".concat(name, \"Amount\"), \"\".concat(name, \"Type\")]\n  });\n  var type = values[\"\".concat(name, \"Type\")];\n  var amount = values[\"\".concat(name, \"Amount\")];\n  var imageType = null;\n\n  if (type) {\n    imageType = __jsx(ImageCanvas, {\n      image: type,\n      x: 27,\n      y: 0,\n      width: 58,\n      height: 58,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 17,\n        columnNumber: 7\n      }\n    });\n  }\n\n  if (Boolean(type)) return null;\n  return __jsx(Group, {\n    x: x,\n    y: y,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 24,\n      columnNumber: 5\n    }\n  }, imageType, Boolean(amount) && __jsx(Text, {\n    text: amount,\n    fontFamily: \"pokename\",\n    fontSize: 15,\n    y: 25,\n    x: 73,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 9\n    }\n  }));\n};\n\n_s(TypeWithAmount, \"zgUvFMNUl18z/IPRq/4lsrEckg8=\", false, function () {\n  return [useWatch];\n});\n\n_c = TypeWithAmount;\nexport default TypeWithAmount;\n\nvar _c;\n\n$RefreshReg$(_c, \"TypeWithAmount\");","map":{"version":3,"sources":["/Users/guillaumeesnault/Documents/Projects/pokemon-generator/client/components/Card/TypeWithAmount.tsx"],"names":["React","useWatch","Text","Group","Image","ImageCanvas","TypeWithAmount","control","name","x","y","values","type","amount","imageType","Boolean"],"mappings":";;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,QAAT,QAAyB,iBAAzB;AACA,SAASC,IAAT,EAAeC,KAAf,EAAsBC,KAAK,IAAIC,WAA/B,QAAkD,aAAlD;;AAEA,IAAMC,cAAc,GAAG,SAAjBA,cAAiB,OAAqC;AAAA;;AAAA,MAAlCC,OAAkC,QAAlCA,OAAkC;AAAA,MAAzBC,IAAyB,QAAzBA,IAAyB;AAAA,oBAAnBC,CAAmB;AAAA,MAAnBA,CAAmB,uBAAf,CAAe;AAAA,oBAAZC,CAAY;AAAA,MAAZA,CAAY,uBAAR,CAAQ;AAC1D,MAAMC,MAAM,GAAGV,QAAQ,CAAC;AACtBM,IAAAA,OAAO,EAAPA,OADsB;AAEtBC,IAAAA,IAAI,EAAE,WAAIA,IAAJ,uBAAqBA,IAArB;AAFgB,GAAD,CAAvB;AAKA,MAAMI,IAAI,GAAGD,MAAM,WAAIH,IAAJ,UAAnB;AACA,MAAMK,MAAM,GAAGF,MAAM,WAAIH,IAAJ,YAArB;AACA,MAAIM,SAAS,GAAG,IAAhB;;AAEA,MAAIF,IAAJ,EAAU;AACRE,IAAAA,SAAS,GACP,MAAC,WAAD;AAAa,MAAA,KAAK,EAAEF,IAApB;AAA0B,MAAA,CAAC,EAAE,EAA7B;AAAiC,MAAA,CAAC,EAAE,CAApC;AAAuC,MAAA,KAAK,EAAE,EAA9C;AAAkD,MAAA,MAAM,EAAE,EAA1D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF;AAGD;;AAED,MAAIG,OAAO,CAACH,IAAD,CAAX,EAAmB,OAAO,IAAP;AAEnB,SACE,MAAC,KAAD;AAAO,IAAA,CAAC,EAAEH,CAAV;AAAa,IAAA,CAAC,EAAEC,CAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGI,SADH,EAEGC,OAAO,CAACF,MAAD,CAAP,IACC,MAAC,IAAD;AAAM,IAAA,IAAI,EAAEA,MAAZ;AAAoB,IAAA,UAAU,EAAC,UAA/B;AAA0C,IAAA,QAAQ,EAAE,EAApD;AAAwD,IAAA,CAAC,EAAE,EAA3D;AAA+D,IAAA,CAAC,EAAE,EAAlE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAHJ,CADF;AAQD,CA1BD;;GAAMP,c;UACWL,Q;;;KADXK,c;AA4BN,eAAeA,cAAf","sourcesContent":["import React from \"react\";\nimport { useWatch } from \"react-hook-form\";\nimport { Text, Group, Image as ImageCanvas } from \"react-konva\";\n\nconst TypeWithAmount = ({ control, name, x = 0, y = 0 }) => {\n  const values = useWatch({\n    control,\n    name: [`${name}Amount`, `${name}Type`],\n  });\n\n  const type = values[`${name}Type`];\n  const amount = values[`${name}Amount`];\n  let imageType = null;\n\n  if (type) {\n    imageType = (\n      <ImageCanvas image={type} x={27} y={0} width={58} height={58} />\n    );\n  }\n\n  if (Boolean(type)) return null;\n\n  return (\n    <Group x={x} y={y}>\n      {imageType}\n      {Boolean(amount) && (\n        <Text text={amount} fontFamily=\"pokename\" fontSize={15} y={25} x={73} />\n      )}\n    </Group>\n  );\n};\n\nexport default TypeWithAmount;\n"]},"metadata":{},"sourceType":"module"}