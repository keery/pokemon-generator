{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/guillaumeesnault/Documents/Projects/pokemon-generator/client/components/Card.tsx\";\nimport React from \"react\";\nimport { Layer, Stage } from \"react-konva\"; // import Konva from \"konva\";\n\nimport { useFormContext } from \"react-hook-form\";\nimport TypeBackground from \"./Card/TypeBackground\";\n\nconst CardRenderer = () => {\n  const stageRef = /*#__PURE__*/React.createRef();\n  const {\n    control\n  } = useFormContext(); // constructor(props) {\n  //   super(props)\n  //   this.state = {\n  //     mainImage: null,\n  //     evolvePicture: null,\n  //     rarityLogo: null,\n  //     attack1Img: null,\n  //     attack2Img: null,\n  //     sliceStage: generateImg(sliceStageImg),\n  //   }\n  //   this.getStateFromProps = this.getStateFromProps.bind(this)\n  // }\n  // async getStateFromProps(prevProps) {\n  //   const {\n  //     type,\n  //     stage,\n  //     weaknessType,\n  //     resistanceType,\n  //     retreat,\n  //     rarity,\n  //     attack1: { attack1Type, attack1Amount },\n  //     attack2: { attack2Type, attack2Amount },\n  //     mainImage,\n  //     evolvePicture,\n  //   } = this.props\n  //   const nextState = {}\n  //   if (prevProps.stage !== stage) {\n  //     // Move name to the left if is an evolution\n  //     nextState.nameX = stage !== 'basic' ? 142 : 54\n  //   }\n  //   if (\n  //     (prevProps.stage !== stage || prevProps.type !== type) &&\n  //     stage !== '' &&\n  //     type !== ''\n  //   ) {\n  //     nextState.bg = await this.getDynamicImg(`${type}-${stage}.png`)\n  //   }\n  //   if (prevProps.retreat !== retreat) {\n  //     nextState.retreatImg =\n  //       retreat > 0 && retreat <= 4\n  //         ? await this.getDynamicImg(`retreat-${retreat}.png`)\n  //         : null\n  //   }\n  //   if (prevProps.rarity !== rarity) {\n  //     nextState.rarityLogo = rarity\n  //       ? await this.getDynamicImg(`rarity-${rarity}.png`)\n  //       : null\n  //   }\n  //   if (prevProps.mainImage !== mainImage) {\n  //     nextState.mainImage = mainImage\n  //       ? await this.createImg(mainImage.src, 412, 294)\n  //       : null\n  //   }\n  //   if (prevProps.evolvePicture !== evolvePicture) {\n  //     nextState.evolvePicture = evolvePicture\n  //       ? await this.createImg(evolvePicture.src, 66, 60)\n  //       : null\n  //   }\n  //   return nextState\n  // }\n  // const createImg = (src, maxWidth = false, maxHeight = false) => {\n  //   return new Promise((resolve, reject) => {\n  //     const img = new Image()\n  //     img.crossOrigin = 'anonymous'\n  //     img.src = src\n  //     img.onload = () => {\n  //       if (maxHeight || maxWidth) {\n  //         const ratio = this.calculateAspectRatioFit(\n  //           img.width,\n  //           img.height,\n  //           maxWidth,\n  //           maxHeight,\n  //         )\n  //         img.width = ratio.width\n  //         img.height = ratio.height\n  //       }\n  //       resolve(img)\n  //     }\n  //     return img\n  //   })\n  // }\n  // const getDynamicImg = (file) => {\n  //   return this.createImg(require(`../assets/1-gen/${file}`))\n  // }\n  // const updateImgPos = (event) => {\n  //   const { attrs } = event.target\n  //   this.setState({ [`${attrs.name}X`]: attrs.x, [`${attrs.name}Y`]: attrs.y })\n  // }\n  // calculateAspectRatioFit(srcWidth, srcHeight, maxWidth, maxHeight) {\n  //   if (srcWidth > maxWidth || srcHeight > maxHeight) {\n  //     let height = 0\n  //     let width = 0\n  //     if (srcWidth > srcHeight) {\n  //       height = maxHeight + 4\n  //       width = (srcWidth / srcHeight) * height\n  //     } else {\n  //       width = maxWidth + 4\n  //       height = (srcHeight / srcWidth) * width\n  //     }\n  //     return { width, height }\n  //   }\n  //   return { width: srcWidth, height: srcHeight }\n  // }\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(Stage, {\n      width: 540,\n      height: 755,\n      children: /*#__PURE__*/_jsxDEV(Layer, {\n        children: /*#__PURE__*/_jsxDEV(TypeBackground, {\n          control: control\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 146,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 145,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 143,\n      columnNumber: 7\n    }, this)\n  }, void 0, false);\n};\n\nexport default CardRenderer;","map":{"version":3,"sources":["/Users/guillaumeesnault/Documents/Projects/pokemon-generator/client/components/Card.tsx"],"names":["React","Layer","Stage","useFormContext","TypeBackground","CardRenderer","stageRef","createRef","control"],"mappings":";;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,KAAT,EAAuBC,KAAvB,QAAoC,aAApC,C,CACA;;AACA,SAASC,cAAT,QAA+B,iBAA/B;AAWA,OAAOC,cAAP,MAA2B,uBAA3B;;AAIA,MAAMC,YAAY,GAAG,MAAM;AACzB,QAAMC,QAAQ,gBAAGN,KAAK,CAACO,SAAN,EAAjB;AACA,QAAM;AAAEC,IAAAA;AAAF,MAAcL,cAAc,EAAlC,CAFyB,CAIzsBACE;AAAA,2BACE,QAAC,KAAD;AAAO,MAAA,KAAK,EAAE,GAAd;AAAmB,MAAA,MAAM,EAAE,GAA3B;AAAA,6BAEE,QAAC,KAAD;AAAA,+BACE,QAAC,cAAD;AAAgB,UAAA,OAAO,EAAEK;AAAzB;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA;AAFF;AAAA;AAAA;AAAA;AAAA;AADF,mBADF;AAyBD,CAnJD;;AAqJA,eAAeH,YAAf","sourcesContent":["import React from \"react\";\nimport { Layer, Group, Stage } from \"react-konva\";\n// import Konva from \"konva\";\nimport { useFormContext } from \"react-hook-form\";\nimport Name from \"./Card/Name\";\nimport Attacks from \"./Card/Attacks\";\nimport MainImage from \"./Card/MainImage\";\nimport Evolution from \"./Card/Evolution\";\nimport HP from \"./Card/HP\";\nimport SubInfo from \"./Card/SubInfo\";\nimport TypeWithAmount from \"./Card/TypeWithAmount\";\nimport Description from \"./Card/Description\";\nimport Illustrator from \"./Card/Illustrator\";\nimport CollectionNumber from \"./Card/CollectionNumber\";\nimport TypeBackground from \"./Card/TypeBackground\";\nimport Rarity from \"./Card/Rarity\";\nimport Retreat from \"./Card/Retreat\";\n\nconst CardRenderer = () => {\n  const stageRef = React.createRef();\n  const { control } = useFormContext();\n\n  // constructor(props) {\n  //   super(props)\n\n  //   this.state = {\n  //     mainImage: null,\n  //     evolvePicture: null,\n  //     rarityLogo: null,\n  //     attack1Img: null,\n  //     attack2Img: null,\n  //     sliceStage: generateImg(sliceStageImg),\n  //   }\n\n  //   this.getStateFromProps = this.getStateFromProps.bind(this)\n  // }\n\n  // async getStateFromProps(prevProps) {\n  //   const {\n  //     type,\n  //     stage,\n  //     weaknessType,\n  //     resistanceType,\n  //     retreat,\n  //     rarity,\n  //     attack1: { attack1Type, attack1Amount },\n  //     attack2: { attack2Type, attack2Amount },\n  //     mainImage,\n  //     evolvePicture,\n  //   } = this.props\n  //   const nextState = {}\n\n  //   if (prevProps.stage !== stage) {\n  //     // Move name to the left if is an evolution\n  //     nextState.nameX = stage !== 'basic' ? 142 : 54\n  //   }\n  //   if (\n  //     (prevProps.stage !== stage || prevProps.type !== type) &&\n  //     stage !== '' &&\n  //     type !== ''\n  //   ) {\n  //     nextState.bg = await this.getDynamicImg(`${type}-${stage}.png`)\n  //   }\n  //   if (prevProps.retreat !== retreat) {\n  //     nextState.retreatImg =\n  //       retreat > 0 && retreat <= 4\n  //         ? await this.getDynamicImg(`retreat-${retreat}.png`)\n  //         : null\n  //   }\n  //   if (prevProps.rarity !== rarity) {\n  //     nextState.rarityLogo = rarity\n  //       ? await this.getDynamicImg(`rarity-${rarity}.png`)\n  //       : null\n  //   }\n  //   if (prevProps.mainImage !== mainImage) {\n  //     nextState.mainImage = mainImage\n  //       ? await this.createImg(mainImage.src, 412, 294)\n  //       : null\n  //   }\n  //   if (prevProps.evolvePicture !== evolvePicture) {\n  //     nextState.evolvePicture = evolvePicture\n  //       ? await this.createImg(evolvePicture.src, 66, 60)\n  //       : null\n  //   }\n\n  //   return nextState\n  // }\n\n  // const createImg = (src, maxWidth = false, maxHeight = false) => {\n  //   return new Promise((resolve, reject) => {\n  //     const img = new Image()\n  //     img.crossOrigin = 'anonymous'\n  //     img.src = src\n\n  //     img.onload = () => {\n  //       if (maxHeight || maxWidth) {\n  //         const ratio = this.calculateAspectRatioFit(\n  //           img.width,\n  //           img.height,\n  //           maxWidth,\n  //           maxHeight,\n  //         )\n  //         img.width = ratio.width\n  //         img.height = ratio.height\n  //       }\n  //       resolve(img)\n  //     }\n\n  //     return img\n  //   })\n  // }\n\n  // const getDynamicImg = (file) => {\n  //   return this.createImg(require(`../assets/1-gen/${file}`))\n  // }\n\n  // const updateImgPos = (event) => {\n  //   const { attrs } = event.target\n  //   this.setState({ [`${attrs.name}X`]: attrs.x, [`${attrs.name}Y`]: attrs.y })\n  // }\n\n  // calculateAspectRatioFit(srcWidth, srcHeight, maxWidth, maxHeight) {\n  //   if (srcWidth > maxWidth || srcHeight > maxHeight) {\n  //     let height = 0\n  //     let width = 0\n\n  //     if (srcWidth > srcHeight) {\n  //       height = maxHeight + 4\n  //       width = (srcWidth / srcHeight) * height\n  //     } else {\n  //       width = maxWidth + 4\n  //       height = (srcHeight / srcWidth) * width\n  //     }\n\n  //     return { width, height }\n  //   }\n\n  //   return { width: srcWidth, height: srcHeight }\n  // }\n\n  return (\n    <>\n      <Stage width={540} height={755}>\n        {/* <Stage width={540} height={755} ref={stageRef}> */}\n        <Layer>\n          <TypeBackground control={control} />\n          {/* <Name control={control} />\n          <MainImage control={control} />\n          <Evolution control={control} />\n          <HP control={control} />\n          <SubInfo control={control} />\n          <Attacks control={control} />\n          <Group x={29} y={627} width={570}>\n            <TypeWithAmount control={control} name=\"weakness\" />\n            <TypeWithAmount control={control} name=\"resistance\" x={178} />\n            <Retreat control={control} />\n          </Group>\n          <Description control={control} />\n          <Illustrator control={control} />\n          <CollectionNumber control={control} />\n          <Rarity control={control} /> */}\n        </Layer>\n      </Stage>\n    </>\n  );\n};\n\nexport default CardRenderer;\n"]},"metadata":{},"sourceType":"module"}