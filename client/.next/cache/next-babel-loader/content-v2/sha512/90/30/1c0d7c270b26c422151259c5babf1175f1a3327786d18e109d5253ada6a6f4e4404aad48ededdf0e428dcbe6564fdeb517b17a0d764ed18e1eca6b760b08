{"ast":null,"code":"var _jsxFileName = \"/Users/guillaumeesnault/Documents/Projects/pokemon-generator/client/components/Card.tsx\",\n    _this = this,\n    _s = $RefreshSig$();\n\nvar __jsx = React.createElement;\nimport React from \"react\";\nimport { Layer, Group, Stage } from \"react-konva\";\nimport { useFormContext } from \"react-hook-form\";\nimport { Box } from \"@chakra-ui/react\";\nimport Name from \"./Card/Name\";\nimport Attacks from \"./Card/Attacks\";\nimport MainImage from \"./Card/MainImage\";\nimport Evolution from \"./Card/Evolution\";\nimport HP from \"./Card/HP\";\nimport SubInfo from \"./Card/SubInfo\";\nimport TypeWithAmount from \"./Card/TypeWithAmount\";\nimport Description from \"./Card/Description\";\nimport Illustrator from \"./Card/Illustrator\";\nimport CollectionNumber from \"./Card/CollectionNumber\";\nimport TypeBackground from \"./Card/TypeBackground\";\nimport Rarity from \"./Card/Rarity\";\nimport Retreat from \"./Card/Retreat\";\n\nvar CardRenderer = function CardRenderer() {\n  _s();\n\n  var stageRef = /*#__PURE__*/React.createRef();\n\n  var _useFormContext = useFormContext(),\n      control = _useFormContext.control,\n      watch = _useFormContext.watch;\n\n  console.log(watch()); // constructor(props) {\n  //   super(props)\n  //   this.state = {\n  //     mainImage: null,\n  //     evolvePicture: null,\n  //     rarityLogo: null,\n  //     attack1Img: null,\n  //     attack2Img: null,\n  //     sliceStage: generateImg(sliceStageImg),\n  //   }\n  //   this.getStateFromProps = this.getStateFromProps.bind(this)\n  // }\n  // async getStateFromProps(prevProps) {\n  //   const {\n  //     type,\n  //     stage,\n  //     weaknessType,\n  //     resistanceType,\n  //     retreat,\n  //     rarity,\n  //     attack1: { attack1Type, attack1Amount },\n  //     attack2: { attack2Type, attack2Amount },\n  //     mainImage,\n  //     evolvePicture,\n  //   } = this.props\n  //   const nextState = {}\n  //   if (prevProps.stage !== stage) {\n  //     // Move name to the left if is an evolution\n  //     nextState.nameX = stage !== 'basic' ? 142 : 54\n  //   }\n  //   if (\n  //     (prevProps.stage !== stage || prevProps.type !== type) &&\n  //     stage !== '' &&\n  //     type !== ''\n  //   ) {\n  //     nextState.bg = await this.getDynamicImg(`${type}-${stage}.png`)\n  //   }\n  //   if (prevProps.retreat !== retreat) {\n  //     nextState.retreatImg =\n  //       retreat > 0 && retreat <= 4\n  //         ? await this.getDynamicImg(`retreat-${retreat}.png`)\n  //         : null\n  //   }\n  //   if (prevProps.rarity !== rarity) {\n  //     nextState.rarityLogo = rarity\n  //       ? await this.getDynamicImg(`rarity-${rarity}.png`)\n  //       : null\n  //   }\n  //   if (prevProps.mainImage !== mainImage) {\n  //     nextState.mainImage = mainImage\n  //       ? await this.createImg(mainImage.src, 412, 294)\n  //       : null\n  //   }\n  //   if (prevProps.evolvePicture !== evolvePicture) {\n  //     nextState.evolvePicture = evolvePicture\n  //       ? await this.createImg(evolvePicture.src, 66, 60)\n  //       : null\n  //   }\n  //   return nextState\n  // }\n  // const createImg = (src, maxWidth = false, maxHeight = false) => {\n  //   return new Promise((resolve, reject) => {\n  //     const img = new Image()\n  //     img.crossOrigin = 'anonymous'\n  //     img.src = src\n  //     img.onload = () => {\n  //       if (maxHeight || maxWidth) {\n  //         const ratio = this.calculateAspectRatioFit(\n  //           img.width,\n  //           img.height,\n  //           maxWidth,\n  //           maxHeight,\n  //         )\n  //         img.width = ratio.width\n  //         img.height = ratio.height\n  //       }\n  //       resolve(img)\n  //     }\n  //     return img\n  //   })\n  // }\n  // const getDynamicImg = (file) => {\n  //   return this.createImg(require(`../assets/1-gen/${file}`))\n  // }\n  // const updateImgPos = (event) => {\n  //   const { attrs } = event.target\n  //   this.setState({ [`${attrs.name}X`]: attrs.x, [`${attrs.name}Y`]: attrs.y })\n  // }\n  // calculateAspectRatioFit(srcWidth, srcHeight, maxWidth, maxHeight) {\n  //   if (srcWidth > maxWidth || srcHeight > maxHeight) {\n  //     let height = 0\n  //     let width = 0\n  //     if (srcWidth > srcHeight) {\n  //       height = maxHeight + 4\n  //       width = (srcWidth / srcHeight) * height\n  //     } else {\n  //       width = maxWidth + 4\n  //       height = (srcHeight / srcWidth) * width\n  //     }\n  //     return { width, height }\n  //   }\n  //   return { width: srcWidth, height: srcHeight }\n  // }\n\n  return __jsx(Box, {\n    layerStyle: \"glass\",\n    border: \"none\",\n    pos: \"relative\",\n    borderRadius: \"1.8rem\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 142,\n      columnNumber: 5\n    }\n  }, __jsx(Stage, {\n    width: 500,\n    height: 700,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 143,\n      columnNumber: 7\n    }\n  }, __jsx(Layer, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 145,\n      columnNumber: 9\n    }\n  }, __jsx(TypeBackground, {\n    control: control,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 146,\n      columnNumber: 11\n    }\n  }), __jsx(Name, {\n    control: control,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 147,\n      columnNumber: 11\n    }\n  }), __jsx(HP, {\n    control: control,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 148,\n      columnNumber: 11\n    }\n  }), __jsx(SubInfo, {\n    control: control,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 149,\n      columnNumber: 11\n    }\n  }), __jsx(Attacks, {\n    control: control,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 150,\n      columnNumber: 11\n    }\n  }), __jsx(MainImage, {\n    control: control,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 151,\n      columnNumber: 11\n    }\n  }), __jsx(Evolution, {\n    control: control,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 152,\n      columnNumber: 11\n    }\n  }), __jsx(Group, {\n    x: 29,\n    y: 627,\n    width: 570,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 153,\n      columnNumber: 11\n    }\n  }, __jsx(TypeWithAmount, {\n    control: control,\n    name: \"weakness\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 154,\n      columnNumber: 13\n    }\n  }), __jsx(TypeWithAmount, {\n    control: control,\n    name: \"resistance\",\n    x: 178,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 155,\n      columnNumber: 13\n    }\n  }), __jsx(Retreat, {\n    control: control,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 156,\n      columnNumber: 13\n    }\n  })), __jsx(Description, {\n    control: control,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 158,\n      columnNumber: 11\n    }\n  }), __jsx(Illustrator, {\n    control: control,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 159,\n      columnNumber: 11\n    }\n  }), __jsx(CollectionNumber, {\n    control: control,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 160,\n      columnNumber: 11\n    }\n  }), __jsx(Rarity, {\n    control: control,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 161,\n      columnNumber: 11\n    }\n  }))));\n};\n\n_s(CardRenderer, \"8cUr2alrU8cmcU6pjsqfOWA5XZk=\", false, function () {\n  return [useFormContext];\n});\n\n_c = CardRenderer;\nexport default CardRenderer;\n\nvar _c;\n\n$RefreshReg$(_c, \"CardRenderer\");","map":{"version":3,"sources":["/Users/guillaumeesnault/Documents/Projects/pokemon-generator/client/components/Card.tsx"],"names":["React","Layer","Group","Stage","useFormContext","Box","Name","Attacks","MainImage","Evolution","HP","SubInfo","TypeWithAmount","Description","Illustrator","CollectionNumber","TypeBackground","Rarity","Retreat","CardRenderer","stageRef","createRef","control","watch","console","log"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport { Layer, Group, Stage } from \"react-konva\";\nimport { useFormContext } from \"react-hook-form\";\nimport { Box } from \"@chakra-ui/react\";\nimport Name from \"./Card/Name\";\nimport Attacks from \"./Card/Attacks\";\nimport MainImage from \"./Card/MainImage\";\nimport Evolution from \"./Card/Evolution\";\nimport HP from \"./Card/HP\";\nimport SubInfo from \"./Card/SubInfo\";\nimport TypeWithAmount from \"./Card/TypeWithAmount\";\nimport Description from \"./Card/Description\";\nimport Illustrator from \"./Card/Illustrator\";\nimport CollectionNumber from \"./Card/CollectionNumber\";\nimport TypeBackground from \"./Card/TypeBackground\";\nimport Rarity from \"./Card/Rarity\";\nimport Retreat from \"./Card/Retreat\";\n\nconst CardRenderer = () => {\n  const stageRef = React.createRef();\n  const { control, watch } = useFormContext();\n  console.log(watch());\n  // constructor(props) {\n  //   super(props)\n\n  //   this.state = {\n  //     mainImage: null,\n  //     evolvePicture: null,\n  //     rarityLogo: null,\n  //     attack1Img: null,\n  //     attack2Img: null,\n  //     sliceStage: generateImg(sliceStageImg),\n  //   }\n\n  //   this.getStateFromProps = this.getStateFromProps.bind(this)\n  // }\n\n  // async getStateFromProps(prevProps) {\n  //   const {\n  //     type,\n  //     stage,\n  //     weaknessType,\n  //     resistanceType,\n  //     retreat,\n  //     rarity,\n  //     attack1: { attack1Type, attack1Amount },\n  //     attack2: { attack2Type, attack2Amount },\n  //     mainImage,\n  //     evolvePicture,\n  //   } = this.props\n  //   const nextState = {}\n\n  //   if (prevProps.stage !== stage) {\n  //     // Move name to the left if is an evolution\n  //     nextState.nameX = stage !== 'basic' ? 142 : 54\n  //   }\n  //   if (\n  //     (prevProps.stage !== stage || prevProps.type !== type) &&\n  //     stage !== '' &&\n  //     type !== ''\n  //   ) {\n  //     nextState.bg = await this.getDynamicImg(`${type}-${stage}.png`)\n  //   }\n  //   if (prevProps.retreat !== retreat) {\n  //     nextState.retreatImg =\n  //       retreat > 0 && retreat <= 4\n  //         ? await this.getDynamicImg(`retreat-${retreat}.png`)\n  //         : null\n  //   }\n  //   if (prevProps.rarity !== rarity) {\n  //     nextState.rarityLogo = rarity\n  //       ? await this.getDynamicImg(`rarity-${rarity}.png`)\n  //       : null\n  //   }\n  //   if (prevProps.mainImage !== mainImage) {\n  //     nextState.mainImage = mainImage\n  //       ? await this.createImg(mainImage.src, 412, 294)\n  //       : null\n  //   }\n  //   if (prevProps.evolvePicture !== evolvePicture) {\n  //     nextState.evolvePicture = evolvePicture\n  //       ? await this.createImg(evolvePicture.src, 66, 60)\n  //       : null\n  //   }\n\n  //   return nextState\n  // }\n\n  // const createImg = (src, maxWidth = false, maxHeight = false) => {\n  //   return new Promise((resolve, reject) => {\n  //     const img = new Image()\n  //     img.crossOrigin = 'anonymous'\n  //     img.src = src\n\n  //     img.onload = () => {\n  //       if (maxHeight || maxWidth) {\n  //         const ratio = this.calculateAspectRatioFit(\n  //           img.width,\n  //           img.height,\n  //           maxWidth,\n  //           maxHeight,\n  //         )\n  //         img.width = ratio.width\n  //         img.height = ratio.height\n  //       }\n  //       resolve(img)\n  //     }\n\n  //     return img\n  //   })\n  // }\n\n  // const getDynamicImg = (file) => {\n  //   return this.createImg(require(`../assets/1-gen/${file}`))\n  // }\n\n  // const updateImgPos = (event) => {\n  //   const { attrs } = event.target\n  //   this.setState({ [`${attrs.name}X`]: attrs.x, [`${attrs.name}Y`]: attrs.y })\n  // }\n\n  // calculateAspectRatioFit(srcWidth, srcHeight, maxWidth, maxHeight) {\n  //   if (srcWidth > maxWidth || srcHeight > maxHeight) {\n  //     let height = 0\n  //     let width = 0\n\n  //     if (srcWidth > srcHeight) {\n  //       height = maxHeight + 4\n  //       width = (srcWidth / srcHeight) * height\n  //     } else {\n  //       width = maxWidth + 4\n  //       height = (srcHeight / srcWidth) * width\n  //     }\n\n  //     return { width, height }\n  //   }\n\n  //   return { width: srcWidth, height: srcHeight }\n  // }\n\n  return (\n    <Box layerStyle=\"glass\" border=\"none\" pos=\"relative\" borderRadius=\"1.8rem\">\n      <Stage width={500} height={700}>\n        {/* <Stage width={540} height={755} ref={stageRef}> */}\n        <Layer>\n          <TypeBackground control={control} />\n          <Name control={control} />\n          <HP control={control} />\n          <SubInfo control={control} />\n          <Attacks control={control} />\n          <MainImage control={control} />\n          <Evolution control={control} />\n          <Group x={29} y={627} width={570}>\n            <TypeWithAmount control={control} name=\"weakness\" />\n            <TypeWithAmount control={control} name=\"resistance\" x={178} />\n            <Retreat control={control} />\n          </Group>\n          <Description control={control} />\n          <Illustrator control={control} />\n          <CollectionNumber control={control} />\n          <Rarity control={control} />\n        </Layer>\n      </Stage>\n    </Box>\n  );\n};\n\nexport default CardRenderer;\n"]},"metadata":{},"sourceType":"module"}