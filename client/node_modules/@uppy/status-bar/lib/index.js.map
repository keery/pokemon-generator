{"version":3,"sources":["index.js"],"names":["UIPlugin","require","getSpeed","getBytesRemaining","getTextDirection","statusBarStates","StatusBarUI","module","exports","StatusBar","constructor","uppy","opts","startUpload","recoveredState","getState","emit","upload","catch","id","title","type","defaultLocale","strings","uploading","complete","uploadFailed","paused","retry","retryUpload","cancel","pause","resume","done","filesUploadedOfTotal","dataUploadedOfTotal","xTimeLeft","uploadXFiles","uploadXNewFiles","xMoreFilesAdded","defaultOptions","target","hideUploadButton","hideRetryButton","hidePauseResumeButton","hideCancelButton","showProgressDetails","hideAfterFinish","doneButtonHandler","i18nInit","render","bind","install","getTotalSpeed","files","totalSpeed","forEach","file","progress","getTotalETA","totalBytesRemaining","reduce","total","Math","round","getUploadingState","isAllErrored","isAllComplete","STATE_ERROR","STATE_COMPLETE","STATE_WAITING","state","fileIDs","Object","keys","i","length","uploadStarted","uploadComplete","STATE_UPLOADING","preprocess","STATE_PREPROCESSING","postprocess","STATE_POSTPROCESSING","capabilities","allowNewUpload","totalProgress","error","newFiles","startedFiles","completeFiles","inProgressNotPausedFiles","isUploadStarted","isAllPaused","isUploadInProgress","isSomeGhost","getObjectOfFilesPerState","newFilesOrRecovered","values","totalETA","resumableUploads","supportsUploadProgress","uploadProgress","totalSize","totalUploadedSize","bytesTotal","bytesUploaded","uploadState","numUploads","i18n","isTargetDOMEl","onMount","element","el","direction","dir","mount","uninstall","unmount","VERSION"],"mappings":"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","sourcesContent":["const { UIPlugin } = require('@uppy/core')\nconst getSpeed = require('@uppy/utils/lib/getSpeed')\nconst getBytesRemaining = require('@uppy/utils/lib/getBytesRemaining')\nconst getTextDirection = require('@uppy/utils/lib/getTextDirection')\nconst statusBarStates = require('./StatusBarStates')\nconst StatusBarUI = require('./StatusBar')\n\n/**\n * StatusBar: renders a status bar with upload/pause/resume/cancel/retry buttons,\n * progress percentage and time remaining.\n */\nmodule.exports = class StatusBar extends UIPlugin {\n  static VERSION = require('../package.json').version\n\n  constructor (uppy, opts) {\n    super(uppy, opts)\n    this.id = this.opts.id || 'StatusBar'\n    this.title = 'StatusBar'\n    this.type = 'progressindicator'\n\n    this.defaultLocale = {\n      strings: {\n        uploading: 'Uploading',\n        upload: 'Upload',\n        complete: 'Complete',\n        uploadFailed: 'Upload failed',\n        paused: 'Paused',\n        retry: 'Retry',\n        retryUpload: 'Retry upload',\n        cancel: 'Cancel',\n        pause: 'Pause',\n        resume: 'Resume',\n        done: 'Done',\n        filesUploadedOfTotal: {\n          0: '%{complete} of %{smart_count} file uploaded',\n          1: '%{complete} of %{smart_count} files uploaded',\n        },\n        dataUploadedOfTotal: '%{complete} of %{total}',\n        xTimeLeft: '%{time} left',\n        uploadXFiles: {\n          0: 'Upload %{smart_count} file',\n          1: 'Upload %{smart_count} files',\n        },\n        uploadXNewFiles: {\n          0: 'Upload +%{smart_count} file',\n          1: 'Upload +%{smart_count} files',\n        },\n        xMoreFilesAdded: {\n          0: '%{smart_count} more file added',\n          1: '%{smart_count} more files added',\n        },\n      },\n    }\n\n    // set default options\n    const defaultOptions = {\n      target: 'body',\n      hideUploadButton: false,\n      hideRetryButton: false,\n      hidePauseResumeButton: false,\n      hideCancelButton: false,\n      showProgressDetails: false,\n      hideAfterFinish: true,\n      doneButtonHandler: null,\n    }\n\n    this.opts = { ...defaultOptions, ...opts }\n\n    this.i18nInit()\n\n    this.render = this.render.bind(this)\n    this.install = this.install.bind(this)\n  }\n\n  getTotalSpeed (files) {\n    let totalSpeed = 0\n    files.forEach((file) => {\n      totalSpeed += getSpeed(file.progress)\n    })\n    return totalSpeed\n  }\n\n  getTotalETA (files) {\n    const totalSpeed = this.getTotalSpeed(files)\n    if (totalSpeed === 0) {\n      return 0\n    }\n\n    const totalBytesRemaining = files.reduce((total, file) => {\n      return total + getBytesRemaining(file.progress)\n    }, 0)\n\n    return Math.round(totalBytesRemaining / totalSpeed * 10) / 10\n  }\n\n  startUpload = () => {\n    const { recoveredState } = this.uppy.getState()\n    if (recoveredState) {\n      this.uppy.emit('restore-confirmed')\n      return\n    }\n    return this.uppy.upload().catch(() => {\n      // Error logged in Core\n    })\n  }\n\n  getUploadingState (isAllErrored, isAllComplete, recoveredState, files) {\n    if (isAllErrored) {\n      return statusBarStates.STATE_ERROR\n    }\n\n    if (isAllComplete) {\n      return statusBarStates.STATE_COMPLETE\n    }\n\n    if (recoveredState) {\n      return statusBarStates.STATE_WAITING\n    }\n\n    let state = statusBarStates.STATE_WAITING\n    const fileIDs = Object.keys(files)\n    for (let i = 0; i < fileIDs.length; i++) {\n      const { progress } = files[fileIDs[i]]\n      // If ANY files are being uploaded right now, show the uploading state.\n      if (progress.uploadStarted && !progress.uploadComplete) {\n        return statusBarStates.STATE_UPLOADING\n      }\n      // If files are being preprocessed AND postprocessed at this time, we show the\n      // preprocess state. If any files are being uploaded we show uploading.\n      if (progress.preprocess && state !== statusBarStates.STATE_UPLOADING) {\n        state = statusBarStates.STATE_PREPROCESSING\n      }\n      // If NO files are being preprocessed or uploaded right now, but some files are\n      // being postprocessed, show the postprocess state.\n      if (progress.postprocess\n          && state !== statusBarStates.STATE_UPLOADING\n          && state !== statusBarStates.STATE_PREPROCESSING) {\n        state = statusBarStates.STATE_POSTPROCESSING\n      }\n    }\n    return state\n  }\n\n  render (state) {\n    const {\n      capabilities,\n      files,\n      allowNewUpload,\n      totalProgress,\n      error,\n      recoveredState,\n    } = state\n\n    const {\n      newFiles,\n      startedFiles,\n      completeFiles,\n      inProgressNotPausedFiles,\n\n      isUploadStarted,\n      isAllComplete,\n      isAllErrored,\n      isAllPaused,\n      isUploadInProgress,\n      isSomeGhost,\n    } = this.uppy.getObjectOfFilesPerState()\n\n    // If some state was recovered, we want to show Upload button/counter\n    // for all the files, because in this case it’s not an Upload button,\n    // but “Confirm Restore Button”\n    const newFilesOrRecovered = recoveredState ? Object.values(files) : newFiles\n    const totalETA = this.getTotalETA(inProgressNotPausedFiles)\n    const resumableUploads = !!capabilities.resumableUploads\n    const supportsUploadProgress = capabilities.uploadProgress !== false\n\n    let totalSize = 0\n    let totalUploadedSize = 0\n\n    startedFiles.forEach((file) => {\n      totalSize += (file.progress.bytesTotal || 0)\n      totalUploadedSize += (file.progress.bytesUploaded || 0)\n    })\n\n    return StatusBarUI({\n      error,\n      uploadState: this.getUploadingState(isAllErrored, isAllComplete, recoveredState, state.files || {}),\n      allowNewUpload,\n      totalProgress,\n      totalSize,\n      totalUploadedSize,\n      isAllComplete,\n      isAllPaused,\n      isAllErrored,\n      isUploadStarted,\n      isUploadInProgress,\n      isSomeGhost,\n      recoveredState,\n      complete: completeFiles.length,\n      newFiles: newFilesOrRecovered.length,\n      numUploads: startedFiles.length,\n      totalETA,\n      files,\n      i18n: this.i18n,\n      uppy: this.uppy,\n      startUpload: this.startUpload,\n      doneButtonHandler: this.opts.doneButtonHandler,\n      resumableUploads,\n      supportsUploadProgress,\n      showProgressDetails: this.opts.showProgressDetails,\n      hideUploadButton: this.opts.hideUploadButton,\n      hideRetryButton: this.opts.hideRetryButton,\n      hidePauseResumeButton: this.opts.hidePauseResumeButton,\n      hideCancelButton: this.opts.hideCancelButton,\n      hideAfterFinish: this.opts.hideAfterFinish,\n      isTargetDOMEl: this.isTargetDOMEl,\n    })\n  }\n\n  onMount () {\n    // Set the text direction if the page has not defined one.\n    const element = this.el\n    const direction = getTextDirection(element)\n    if (!direction) {\n      element.dir = 'ltr'\n    }\n  }\n\n  install () {\n    const { target } = this.opts\n    if (target) {\n      this.mount(target, this)\n    }\n  }\n\n  uninstall () {\n    this.unmount()\n  }\n}\n"]}