{"version":3,"file":"yup.js","sources":["../../src/yup.ts"],"sourcesContent":["/* eslint-disable @typescript-eslint/ban-ts-comment */\nimport {\n  Resolver,\n  ResolverError,\n  ResolverSuccess,\n  transformToNestObject,\n} from 'react-hook-form';\nimport Yup from 'yup';\n\n/**\n * From 0.32.0, Yup add TypeScript support and `path` typing is optional that's why we have `@ts-expect-error`\n * FYI: `path`: a string, indicating where there error was thrown. `path` is empty at the root level.\n * react-hook-form's values are object so path is defined\n * https://github.com/jquense/yup#validationerrorerrors-string--arraystring-value-any-path-string\n */\nconst parseErrorSchema = (\n  error: Yup.ValidationError,\n  validateAllFieldCriteria: boolean,\n) => {\n  return Array.isArray(error.inner) && error.inner.length\n    ? error.inner.reduce(\n        (previous: Record<string, any>, { path, message, type }) => {\n          // @ts-expect-error\n          const previousTypes = (previous[path] && previous[path].types) || {};\n          const key = path || type;\n\n          return {\n            ...previous,\n            ...(key\n              ? {\n                  [key]: {\n                    ...(previous[key] || {\n                      message,\n                      type,\n                    }),\n                    ...(validateAllFieldCriteria\n                      ? {\n                          types: {\n                            ...previousTypes,\n                            // @ts-expect-error\n                            [type]: previousTypes[type]\n                              ? // @ts-expect-error\n                                [...[].concat(previousTypes[type]), message]\n                              : message,\n                          },\n                        }\n                      : {}),\n                  },\n                }\n              : {}),\n          };\n        },\n        {},\n      )\n    : {\n        // @ts-expect-error\n        [error.path]: { message: error.message, type: error.type },\n      };\n};\n\ntype ValidateOptions<T extends Yup.AnyObjectSchema> = Parameters<\n  T['validate']\n>[1];\n\nexport const yupResolver = <T extends Yup.AnyObjectSchema>(\n  schema: T,\n  options: ValidateOptions<T> = {\n    abortEarly: false,\n  },\n): Resolver<Yup.InferType<T>> => async (\n  values,\n  context,\n  validateAllFieldCriteria = false,\n) => {\n  try {\n    if (options.context && process.env.NODE_ENV === 'development') {\n      // eslint-disable-next-line no-console\n      console.warn(\n        \"You should not used the yup options context. Please, use the 'useForm' context object instead\",\n      );\n    }\n    return {\n      values: await schema.validate(values, {\n        ...options,\n        context,\n      }),\n      errors: {},\n    } as ResolverSuccess<Yup.InferType<T>>;\n  } catch (e) {\n    const parsedErrors = parseErrorSchema(e, validateAllFieldCriteria);\n    return {\n      values: {},\n      errors: transformToNestObject(parsedErrors),\n    } as ResolverError<Yup.InferType<T>>;\n  }\n};\n"],"names":["schema","options","abortEarly","values","context","validateAllFieldCriteria","process","env","NODE_ENV","validate","_a","_b","parsedErrors","error","Array","isArray","inner","length","reduce","previous","path","message","type","previousTypes","types","key","concat","parseErrorSchema","e_1","errors","transformToNestObject"],"mappings":"2KAgE2B,SACzBA,EACAC,GAG+B,oBAH/BA,GACEC,YAAY,IAEiB,SAC/BC,EACAC,EACAC,uBAAAA,2HAUY,6BAPNJ,EAAQG,SAAWE,QAAQC,IAAIC,iBAOnBR,EAAOS,SAASN,2BACzBF,IACHG,qBAHJ,UACEM,SAAQC,SAIRD,SAAQ,cAIV,kBADME,EA1Ee,SACvBC,EACAR,SAEA,OAAOS,MAAMC,QAAQF,EAAMG,QAAUH,EAAMG,MAAMC,OAC7CJ,EAAMG,MAAME,QACV,SAACC,EAA+BT,WAAEU,SAAMC,YAASC,SAEzCC,EAAiBJ,EAASC,IAASD,EAASC,GAAMI,OAAU,GAC5DC,EAAML,GAAQE,EAEpB,gCACKH,GACCM,UAEGA,4BACKN,EAASM,IAAQ,CACnBJ,UACAC,SAEEjB,EACA,CACEmB,+BACKD,WAEFD,GAAOC,EAAcD,cAEd,GAAGI,OAAOH,EAAcD,KAAQD,IACpCA,OAGR,OAGR,MAGR,YAICR,EAAMO,MAAO,CAAEC,QAASR,EAAMQ,QAASC,KAAMT,EAAMS,SAiCnCK,CAAiBC,EAAGvB,MAClC,CACLF,OAAQ,GACR0B,OAAQC,wBAAsBlB"}