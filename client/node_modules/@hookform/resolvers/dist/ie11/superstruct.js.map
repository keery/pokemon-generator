{"version":3,"file":"superstruct.js","sources":["../../src/superstruct.ts"],"sourcesContent":["import {\n  appendErrors,\n  transformToNestObject,\n  Resolver,\n  ResolverSuccess,\n  ResolverError,\n} from 'react-hook-form';\nimport { StructError, validate, Struct, Infer } from 'superstruct';\nimport convertArrayToPathName from './utils/convertArrayToPathName';\n\nconst parseErrorSchema = (\n  error: StructError,\n  validateAllFieldCriteria: boolean,\n) =>\n  error\n    .failures()\n    .reduce((previous: Record<string, any>, { path, message = '', type }) => {\n      const currentPath = convertArrayToPathName(path);\n      return {\n        ...previous,\n        ...(path\n          ? previous[currentPath] && validateAllFieldCriteria\n            ? {\n                [currentPath]: appendErrors(\n                  currentPath,\n                  validateAllFieldCriteria,\n                  previous,\n                  type || '',\n                  message,\n                ),\n              }\n            : {\n                [currentPath]: previous[currentPath] || {\n                  message,\n                  type,\n                  ...(validateAllFieldCriteria\n                    ? {\n                        types: { [type || '']: message || true },\n                      }\n                    : {}),\n                },\n              }\n          : {}),\n      };\n    }, {});\n\ntype Options = Parameters<typeof validate>[2];\n\nexport const superstructResolver = <T extends Struct<any, any>>(\n  schema: T,\n  options?: Options,\n): Resolver<Infer<T>> => (values, _, validateAllFieldCriteria = false) => {\n  const [errors, result] = validate(values, schema, options);\n\n  if (errors != null) {\n    return {\n      values: {},\n      errors: transformToNestObject(\n        parseErrorSchema(errors, validateAllFieldCriteria),\n      ),\n    } as ResolverError<Infer<T>>;\n  }\n\n  return {\n    values: result,\n    errors: {},\n  } as ResolverSuccess<Infer<T>>;\n};\n"],"names":["parseErrorSchema","error","validateAllFieldCriteria","failures","reduce","previous","_a","path","_e","message","type","currentPath","convertArrayToPathName","appendErrors","types","_d","schema","options","values","_","__read","validate","errors","result","transformToNestObject"],"mappings":"+NAUMA,EAAmB,SACvBC,EACAC,GAEA,OAAAD,EACGE,WACAC,QAAO,SAACC,EAA+BC,aAAEC,SAAMC,YAAAC,aAAU,KAAIC,SACtDC,EAAcC,UAAuBL,GAC3C,gCACKF,GACCE,EACAF,EAASM,IAAgBT,UAEpBS,GAAcE,eACbF,EACAT,EACAG,EACAK,GAAQ,GACRD,cAIDE,GAAcN,EAASM,gBACtBF,UACAC,QACIR,EACA,CACEY,YAASC,EAACL,GAAQ,IAAKD,IAAW,MAEpC,OAGV,MAEL,iCAI4B,SACjCO,EACAC,GACuB,OAAA,SAACC,EAAQC,EAAGjB,gBAAAA,MAC7B,IAAAI,EAAAc,SAAmBC,WAASH,EAAQF,EAAQC,MAA3CK,OAAQC,OAEf,OAAc,MAAVD,EACK,CACLJ,OAAQ,GACRI,OAAQE,wBACNxB,EAAiBsB,EAAQpB,KAKxB,CACLgB,OAAQK,EACRD,OAAQ"}