{"version":3,"file":"zod.js","sources":["../../src/zod.ts"],"sourcesContent":["import {\n  appendErrors,\n  Resolver,\n  ResolverError,\n  ResolverSuccess,\n  transformToNestObject,\n} from 'react-hook-form';\nimport * as z from 'zod';\nimport { ParseParams } from 'zod/lib/src/parser';\nimport convertArrayToPathName from './utils/convertArrayToPathName';\n\nconst parseErrorSchema = (\n  zodError: z.ZodError,\n  validateAllFieldCriteria: boolean,\n) => {\n  if (zodError.isEmpty) {\n    return {};\n  }\n\n  return zodError.errors.reduce<Record<string, any>>(\n    (previous, { path, message, code: type }) => {\n      const currentPath = convertArrayToPathName(path);\n\n      return {\n        ...previous,\n        ...(path\n          ? previous[currentPath] && validateAllFieldCriteria\n            ? {\n                [currentPath]: appendErrors(\n                  currentPath,\n                  validateAllFieldCriteria,\n                  previous,\n                  type,\n                  message,\n                ),\n              }\n            : {\n                [currentPath]: previous[currentPath] || {\n                  message,\n                  type,\n                  ...(validateAllFieldCriteria\n                    ? {\n                        types: { [type]: message || true },\n                      }\n                    : {}),\n                },\n              }\n          : {}),\n      };\n    },\n    {},\n  );\n};\n\nexport const zodResolver = <T extends z.ZodSchema<any, any>>(\n  schema: T,\n  options?: ParseParams,\n): Resolver<z.infer<T>> => async (\n  values,\n  _,\n  validateAllFieldCriteria = false,\n) => {\n  const result = schema.safeParse(values, options);\n\n  if (result.success) {\n    return { values: result.data, errors: {} } as ResolverSuccess<z.infer<T>>;\n  }\n\n  return {\n    values: {},\n    errors: transformToNestObject(\n      parseErrorSchema(result.error, validateAllFieldCriteria),\n    ),\n  } as ResolverError<z.infer<T>>;\n};\n"],"names":["parseErrorSchema","zodError","validateAllFieldCriteria","isEmpty","errors","reduce","previous","_a","path","message","type","currentPath","convertArrayToPathName","appendErrors","types","_d","schema","options","values","_","result","safeParse","success","data","transformToNestObject","error"],"mappings":"sMAWMA,EAAmB,SACvBC,EACAC,GAEA,OAAID,EAASE,QACJ,GAGFF,EAASG,OAAOC,QACrB,SAACC,EAAUC,aAAEC,SAAMC,YAAeC,SAC1BC,EAAcC,UAAuBJ,GAE3C,gCACKF,GACCE,EACAF,EAASK,IAAgBT,UAEpBS,GAAcE,eACbF,EACAT,EACAI,EACAI,EACAD,cAIDE,GAAcL,EAASK,gBACtBF,UACAC,QACIR,EACA,CACEY,YAASC,EAACL,GAAOD,IAAW,MAE9B,OAGV,MAGR,yBAIuB,SACzBO,EACAC,GACyB,OAAA,SACzBC,EACAC,EACAjB,uBAAAA,gGAIA,OAFMkB,EAASJ,EAAOK,UAAUH,EAAQD,IAE7BK,WACF,CAAEJ,OAAQE,EAAOG,KAAMnB,OAAQ,QAGjC,CACLc,OAAQ,GACRd,OAAQoB,wBACNxB,EAAiBoB,EAAOK,MAAOvB"}